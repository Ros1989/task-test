{"version":3,"sources":["redux/store.js","components/Navigation/Navigation.js","components/Navigation/AuthNaw.js","components/UserMenu/default-avatar.png","components/UserMenu/UserMenu.js","components/Navigation/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js","components/Navigation/Navigation.module.css","components/Layout/Container.js","components/Layout/Container.module.css","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","services/tostify.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","devTools","process","persistor","persistStore","connect","state","isAuthenticated","authSelectors","getIsAuthenticated","className","s","nav","link","to","size","AuthNav","exact","mapDispatchToProps","onLogout","authOperations","logOut","name","getUsername","avatar","defaultAvatar","userWrapper","src","alt","width","button","type","onClick","header","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","PrivatePageView","App","this","onGetCurrentUser","Container","fallback","style","display","justifyContent","color","height","path","getCurrentUser","ReactDOM","StrictMode","loading","document","getElementById","module","exports","children","container","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","createReducer","authActions","_","payload","token","setError","error","combineReducers","toast","configure","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","Zoom","infoNotify","text","info","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","post","response","data","message","logIn","getState","persistedToken","get","Boolean"],"mappings":"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","file":"static/js/main.43fa2973.chunk.js","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { authReducer } from './auth';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { IoHome } from 'react-icons/io5';\nimport s from './Navigation.module.css';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../../redux/auth';\n\nconst Navigation = ({ isAuthenticated }) => (\n  <nav className={s.nav}>\n    <NavLink className={s.link} to=\"/\">\n      <IoHome size=\"22\" />\n    </NavLink>\n\n    {isAuthenticated && (\n      <NavLink className={s.link} to=\"/private\">\n        Private page\n      </NavLink>\n    )}\n  </nav>\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(Navigation);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Navigation.module.css';\n\nconst AuthNav = () => (\n  <>\n    <NavLink className={s.link} to=\"/register\" exact>\n      Registation\n    </NavLink>\n    <NavLink className={s.link} to=\"/login\" exact>\n      Login\n    </NavLink>\n  </>\n);\n\nexport default AuthNav;\n","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import React from 'react';\nimport { connect } from 'react-redux';\nimport defaultAvatar from './default-avatar.png';\nimport s from '../Navigation/Navigation.module.css';\nimport { ImExit } from 'react-icons/im';\nimport { authSelectors, authOperations } from '../../redux/auth';\n\nconst UserMenu = ({ avatar, name, onLogout }) => (\n  <div className={s.userWrapper}>\n    <img src={avatar} alt=\"\" width=\"32\" className={s.avatar} />\n    {/* <h1 className={s.name}>Hello, {name}</h1> */}\n    <span className={s.name}>Hello, {name}</span>\n\n    <ImExit size=\"20\" className={s.button} type=\"button\" onClick={onLogout} />\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  name: authSelectors.getUsername(state),\n  avatar: defaultAvatar,\n});\n\nconst mapDispatchToProps = {\n  onLogout: authOperations.logOut,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Navigation from './Navigation';\nimport AuthNav from './AuthNaw';\nimport UserMenu from '../UserMenu/UserMenu';\nimport s from './Navigation.module.css';\nimport { authSelectors } from '../../redux/auth';\n\nconst AppBar = ({ isAuthenticated }) => (\n  <header className={s.header}>\n    <Navigation />\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\n  </header>\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(AppBar);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\n * - В противном случае рендерит Redirect на /login\n */\nconst PrivateRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /private\n * - В противном случае рендерит компонент\n */\nconst PublicRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated && routeProps.restricted ? (\n        <Redirect to={redirectTo} />\n      ) : (\n        <Component {...props} />\n      )\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import React, { Component, Suspense, lazy } from 'react';\nimport { Switch } from 'react-router-dom';\nimport Container from './components/Layout/Container';\nimport AppBar from './components/Navigation/AppBar';\nimport { authOperations } from './redux/auth';\nimport { connect } from 'react-redux';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\nimport Loader from 'react-loader-spinner';\n\nconst HomeView = lazy(() => import('./views/HomeView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\nconst PrivatePageView = lazy(() => import('./views/PrivatePageView'));\n\nclass App extends Component {\n  // рефреш\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <>\n        <Container>\n          <AppBar />\n          <Suspense\n            fallback={\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <Loader type=\"Rings\" color=\"#00BFFF\" height={80} width={80} />\n              </div>\n            }\n          >\n            <Switch>\n              <PublicRoute exact path=\"/\" component={HomeView} />\n              <PrivateRoute\n                path=\"/private\"\n                redirectTo=\"/login\"\n                component={PrivatePageView}\n              />\n              <PublicRoute\n                restricted\n                path=\"/register\"\n                redirectTo=\"/private\"\n                component={RegisterView}\n              />\n              <PublicRoute\n                restricted\n                path=\"/login\"\n                redirectTo=\"/private\"\n                component={LoginView}\n              />\n            </Switch>\n          </Suspense>\n        </Container>\n      </>\n    );\n  }\n}\n\n//рефреш\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Navigation_header__391HK\",\"link\":\"Navigation_link__1Lkea\",\"nav\":\"Navigation_nav__1kw0Q\",\"button\":\"Navigation_button__vWdws\",\"name\":\"Navigation_name__rZhXo\",\"userWrapper\":\"Navigation_userWrapper__27GLa\",\"avatar\":\"Navigation_avatar__jIu9A\"};","import s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3YuFf\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\n// actions для рефреша\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\nexport default {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = { name: null, email: null };\n\n//payload.user, payload.token, payload.error береться с (response.data)\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\nconst setError = (_, { payload }) => payload;\n\nconst error = createReducer(null, {\n  [authActions.registerError]: setError,\n  [authActions.loginError]: setError,\n  [authActions.logoutError]: setError,\n  [authActions.getCurrentUserError]: setError,\n});\n\nexport default combineReducers({\n  user,\n  token,\n  error,\n});\n","import { toast, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure({\n  position: 'top-right',\n  autoClose: 3000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  transition: Zoom,\n});\n\nexport const infoNotify = text => toast.info(text);\n","import axios from 'axios';\nimport authActions from './auth-actions';\nimport { infoNotify } from '../../services/tostify';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\n//при всех запросах ставим или снимаем на заголовок Авторизации. Паттерн `Bearer ${token}` - НОСИТЕЛЬ токена\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n/*\n * POST @ /users/signup\n * body { name, email, password }\n *\n * После успешной регистрации добавляем токен в HTTP-заголовок\n */\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post('/users/signup', credentials);\n\n    //если все хорошо диспатчим и передаем токен\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n    infoNotify('Welcome');\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\n/*\n * POST @ /users/login\n * body:\n *    { email, password }\n *\n * После успешного логина добавляем токен в HTTP-заголовок\n */\n\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post('/users/login', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n    infoNotify('Welcome');\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\n/*\n * POST @ /users/logout\n * headers:\n *    Authorization: Bearer token\n *\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\n */\n\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\n/*\n * GET @ /users/current\n * headers:\n *    Authorization: Bearer token\n *\n * 1. Забираем токен из стейта через getState()\n * 2. Если токена нет, выходим не выполняя никаких операций\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\n */\n\n// getState это функция с redux, которая возвращает state\n\n//логика для рефреша\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  register,\n  logIn,\n  logOut,\n  getCurrentUser,\n};\n","// будем проверять состояние логина пользователя по токену\n// если токен есть, туда прийдет какая-то строка, так как она не пустая приведется к true\nconst getIsAuthenticated = state => Boolean(state.auth.token);\nconst getUsername = state => state.auth.user.name;\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getIsAuthenticated,\n  getUsername,\n};\n"],"sourceRoot":""}